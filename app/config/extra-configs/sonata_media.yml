#
# more information can be found here http://sonata-project.org/bundles/media
#

sonata_media:
    db_driver:       doctrine_orm # | doctrine_mongodb
    default_context: default
    class:
        media:              Oxa\Sonata\MediaBundle\Entity\Media
        gallery:            Oxa\Sonata\MediaBundle\Entity\Gallery
        gallery_has_media:  Oxa\Sonata\MediaBundle\Entity\GalleryHasMedia
    contexts:
        default:  # the default context is mandatory
            download:
                mode: http # X-Sendfile | http
            providers:
                - sonata.media.provider.image
                - sonata.media.provider.file
#                - sonata.media.provider.dailymotion
#                - sonata.media.provider.youtube
#                - sonata.media.provider.vimeo
            formats:
                small:    { width: 100, quality: 100}
                medium:   { width: 300, quality: 100}
                preview:  { width: 220, quality: 100}

        business_profile_images:
            download:
                mode: http
            providers:
                - sonata.media.provider.image
            formats:
                small:         { width: 100, quality: 100}
                admin_show:    { width: 1000, quality: 100}

        business_profile_logo:
            download:
                mode: http
            providers:
                - sonata.media.provider.image
            formats:
                small:    { width: 1000, quality: 100}

    cdn:
        #define the public base url for the uploaded media
        server:
            path:      %sonata_media.cdn.host%
#             path: 'http://symfony-admin/uploads/media'
    filesystem:
        # define where the uploaded file will be stored
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     true

    providers:
        # ...
        file:
            # the resizer must be set to false, otherwhise this can delete icon files from the fs
            resizer:    false
        image:
           thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#            thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        vimeo:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        youtube:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image
        dailymotion:
            thumbnail: sonata.media.thumbnail.format          # default value
#           thumbnail: sonata.media.thumbnail.consumer.format # can be used to dispatch the resize action to async task
#           thumbnail: sonata.media.thumbnail.liip_imagine    # use the LiipImagineBundle to resize the image

    pixlr:
        enabled:  false
        referrer: Demo - Sonata Project

    resizer:
        simple:
#            mode:  outbound
            mode:  inset


