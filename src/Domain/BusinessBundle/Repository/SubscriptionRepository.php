<?php

namespace Domain\BusinessBundle\Repository;

use Domain\BusinessBundle\Entity\BusinessProfile;
use Domain\BusinessBundle\Entity\Subscription;
use Domain\BusinessBundle\Util\Traits\StatusTrait;
use Doctrine\ORM\Internal\Hydration\IterableResult;

/**
 * SubscriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriptionRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param BusinessProfile $businessProfile
     *
     * @return Subscription[]
     */
    public function getActualSubscriptionsForBusiness(BusinessProfile $businessProfile)
    {
        $queryBuilder = $this->createQueryBuilder('s');

        $queryBuilder->select('s')
            ->andWhere('s.businessProfile = :businessProfile')
            ->andWhere('s.status IN (:actualSubscriptions)')
            ->setParameter('businessProfile', $businessProfile)
            ->setParameter('actualSubscriptions', StatusTrait::getActualStatuses())
        ;

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @return IterableResult
     */
    public function getActiveSubscriptionsStepIterator()
    {
        $now = new \DateTime();

        $queryBuilder = $this->createQueryBuilder('s');

        $queryBuilder
            ->select('s')
            ->andWhere('s.status IN (:actualSubscriptions)')
            ->andWhere('s.endDate <= :now')
            ->setParameter('actualSubscriptions', StatusTrait::getActualStatuses())
            ->setParameter(':now', $now)
        ;

        $query = $this->getEntityManager()->createQuery($queryBuilder->getDQL());
        $query
            ->setParameter('actualSubscriptions', StatusTrait::getActualStatuses())
            ->setParameter(':now', $now)
        ;

        $iterateResult = $query->iterate();

        return $iterateResult;
    }
}
