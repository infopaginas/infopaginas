<?php

namespace Domain\ArticleBundle\Repository;
use Oxa\ManagerArchitectureBundle\Model\DataType\AbstractDTO;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository
{
    protected function getArticlesQueryBuilder()
    {
        return $this->createQueryBuilder('a')
            ->where('a.isPublished = true');
    }

    protected function getArticlesForHomepageQueryBuilder()
    {
        return $this->getArticlesQueryBuilder()
            ->andWhere('a.isOnHomepage = true')
            ->addOrderBy('a.createdAt', "DESC");
    }

    protected function getPublishedArticlesQueryBuilder(string $category = '')
    {
        $qb = $this->getArticlesQueryBuilder();

        if ($category) {
            $qb = $qb
                ->leftJoin('a.category', 'c')
                ->andWhere('c.slug = :category')
                ->setParameter('category', $category);
        }

        return $qb;
    }

    public function getArticlesForHomepage($limit)
    {
        return $this->getArticlesForHomepageQueryBuilder()
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult();
    }

    public function getPublishedArticles(string $category)
    {
        return $this->getPublishedArticlesQueryBuilder($category)->getQuery()->getResult();
    }

    /**
     * @param BusinessProfile $businessProfile
     * @param AbstractDTO $paramsDTO
     * @return array
     */
    public function findPaginatedPublishedArticles(AbstractDTO $paramsDTO, string $category)
    {
        $limit  = $paramsDTO->limit;
        $offset = ($paramsDTO->page - 1) * $limit;

        $queryBuilder = $this->getPublishedArticlesQueryBuilder($category);
        $queryBuilder = $queryBuilder
            ->setMaxResults($limit)
            ->setFirstResult($offset);

        return $queryBuilder->getQuery()->getResult();
    }
}
