<?php

namespace Domain\BusinessBundle\Repository;
use Doctrine\ORM\Internal\Hydration\IterableResult;
use Domain\BusinessBundle\Entity\Category;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends \Gedmo\Tree\Entity\Repository\MaterializedPathRepository
{
    public function getAvailableCategoriesQb()
    {
        $qb = $this->createQueryBuilder('c')
            ->where('c.isActive = TRUE')
            ->orderBy('c.name');

        return $qb;
    }

    public function getAvailableParentCategoriesQb()
    {
        $qb = $this->getAvailableCategoriesQb()
            ->andWhere('c.parent IS NULL')
        ;

        return $qb;
    }

    public function getAvailableChildCategoriesQb($level = Category::CATEGORY_LEVEL_2)
    {
        $qb = $this->getAvailableCategoriesQb()
            ->andWhere('c.parent IS NOT NULL')
            ->andWhere('c.lvl = :level')
            ->setParameter('level', $level)
        ;

        return $qb;
    }

    public function getAvailableParentCategories($locale = false)
    {
        $qb = $this->getAvailableParentCategoriesQb();

        if ($locale) {
            $qb->orderBy('c.searchText' . ucfirst($locale));
        }

        return $qb->getQuery()->getResult();
    }

    public function getAvailableSubCategoriesQb($parents, $level = Category::CATEGORY_LEVEL_2)
    {
        $qb = $this->getAvailableCategoriesQb()
            ->andWhere('c.parent IN (:parents)')
            ->andWhere('c.lvl = :lvl')
            ->setParameter('parents', $parents)
            ->setParameter('lvl', $level)
        ;

        return $qb;
    }

    public function getAvailableCategories()
    {
        $qb = $this->getAvailableCategoriesQb();

        return $qb->getQuery()->getResult();
    }

    public function getAvailableSubCategories($parents, $level = Category::CATEGORY_LEVEL_2)
    {
        $qb = $this->getAvailableSubCategoriesQb($parents, $level);

        return $qb->getQuery()->getResult();
    }

    public function getAvailableCategoriesByIds($ids)
    {
        $qb = $this->getAvailableCategoriesQb()
            ->andWhere('c.id IN (:ids)')
            ->setParameter('ids', $ids)
        ;

        return $qb->getQuery()->getResult();
    }

    protected function getCategoryQueryBuilder()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
            ->select('c')
            ->from('DomainBusinessBundle:Category', 'c');

        return $queryBuilder;
    }

    public function getCategoryByBusinessesIds(array $businessIdList)
    {
        $queryBuilder = $this->getCategoryQueryBuilder()
            ->join('c.businessProfiles', 'bp')
            ->where('bp.id in (:ids)')
            ->setParameter('ids', $businessIdList)
            ->orderBy('c.name')
        ;

        $results = $queryBuilder->getQuery()->getResult();

        return $results;
    }

    /**
     * Count all categories
     *
     * @return mixed
     */
    public function getAllCategoriesCount()
    {
        return $this->getEntityManager()->createQueryBuilder()
            ->select('COUNT(c.id)')
            ->from('DomainBusinessBundle:Category', 'c')
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    public function searchSubcategoryByCategory($category, $level, $locale)
    {
        $qb = $this->getAvailableSubCategoriesQb($category, $level)
            ->orderBy('c.searchText' . ucfirst($locale));

        return $qb->getQuery()->getResult();
    }

    public function getCategoryBySlug($categorySlug, $customSlug = false)
    {
        $query = $this->getAvailableCategoriesQb()
            ->where('c.slug = :categorySlug')
            ->setParameter('categorySlug', $categorySlug)
        ;

        if ($customSlug) {
            $query->orWhere('c.slug = :customSlug')
                ->orWhere('c.slugEn = :customSlug')
                ->orWhere('c.slugEs = :customSlug')
                ->setParameter('customSlug', $customSlug)
            ;
        }

        return $query->getQuery()->getOneOrNullResult();
    }

    public function getCategoryByCustomSlug($customSlug)
    {
        $query = $this->getAvailableCategoriesQb()
            ->andWhere('c.slugEn = :customSlug OR c.slugEs = :customSlug')
            ->setParameter('customSlug', $customSlug)
        ;

        return $query->getQuery()->getOneOrNullResult();
    }

    public function getCategoriesBySlugs($categoriesSlugs)
    {
        $query = $this->getAvailableCategoriesQb()
            ->where('c.slug IN (:categoriesSlugs)')
            ->setParameter('categoriesSlugs', $categoriesSlugs)
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * @return IterableResult
     */
    public function getAvailableCategoriesIterator()
    {
        $qb = $this->getAvailableCategoriesQb();

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    /**
     * @return IterableResult
     */
    public function getAvailableParentCategoriesIterator()
    {
        $qb = $this->getAvailableParentCategoriesQb();

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    public function getAvailableSubcategoriesByCategoryIterator($category, $level)
    {
        $qb = $this->getAvailableSubCategoriesQb($category);

        $query = $this->getEntityManager()->createQuery($qb->getDQL());
        $query->setParameter('parents', $category)
            ->setParameter('lvl', $level)
        ;

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    public function getCategoryParents($category)
    {
        $ids = array_filter(explode(',', $category->getPath()));

        $query = $this->getAvailableCategoriesQb()
            ->where('c.id IN (:path)')
            ->setParameter('path', $ids)
        ;

        return $query->getQuery()->getResult();
    }

    /**
     * @return IterableResult
     */
    public function getUpdatedCategoriesIterator()
    {
        $qb = $this->getAvailableCategoriesQb();
        $qb->andWhere('c.isUpdated = TRUE');

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    /**
     * Set isUpdated flag for all businesses for elastic search synchronization
     *
     * @return mixed
     */
    public function setUpdatedAllCategories()
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->update('DomainBusinessBundle:Category', 'c')
            ->where('c.isActive = TRUE')
            ->set('c.isUpdated', ':isUpdated')
            ->setParameter('isUpdated', true)
            ->getQuery()
            ->execute()
        ;

        return $result;
    }
}
