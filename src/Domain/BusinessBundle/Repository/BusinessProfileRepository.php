<?php

namespace Domain\BusinessBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Internal\Hydration\IterableResult;
use Doctrine\ORM\Query\Expr;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Domain\BusinessBundle\Entity\BusinessProfile;
use Domain\BusinessBundle\Entity\Subscription;
use Domain\BusinessBundle\Model\SubscriptionPlanInterface;
use FOS\UserBundle\Model\UserInterface;
use Domain\BusinessBundle\Model\StatusInterface;
use Doctrine\ORM\QueryBuilder;
use Domain\SearchBundle\Model\DataType\SearchDTO;
use Oxa\GeolocationBundle\Model\Geolocation\LocationValueObject;
use Oxa\GeolocationBundle\Utils\GeolocationUtils;
use Domain\SearchBundle\Util\SearchDataUtil;
use Oxa\VideoBundle\Entity\VideoMedia;
use Symfony\Component\Config\Definition\Builder\ExprBuilder;
use Doctrine\Common\Collections\Criteria;

/**
 * BusinessProfileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessProfileRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param int $id
     * @param string $locale
     * @return mixed
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findWithLocale(int $id, string $locale)
    {
        $qb = $this->createQueryBuilder('bp');

        $qb->select('bp')
            ->where('bp.id = :id')
            ->leftJoin('bp.categories', 'categories')
            ->setParameter('id', $id);

        $query = $qb->getQuery();

        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        // Force the locale
        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale
        );

        return $query->getSingleResult();
    }

    /**
     * @param UserInterface $user
     * @return array
     */
    public function findUserBusinessProfiles(UserInterface $user)
    {
        $businessProfiles = $this->findBy([
            'user' => $user,
            'isActive' => true,
        ]);

        return $businessProfiles;
    }

    /**
     * @param UserInterface $user
     * @return array
     */
    public function findBusinessProfilesReviewedByUser(UserInterface $user)
    {
        $queryBuilder = $this->createQueryBuilder('bp')
            ->select('bp business, bp.slug')
            ->join('bp.businessReviews', 'br')
            ->where('br.user = :user')
            ->andWhere('bp.isActive = TRUE')
            ->setParameter('user', $user)
        ;

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * @param $ids
     * @return array
     */
    public function findBusinessProfilesByIdsArray($ids)
    {
        $queryBuilder = $this->createQueryBuilder('bp')
            ->where('bp.id IN (:ids)')
            ->setParameter('ids', $ids);

        return $queryBuilder->getQuery()->getResult();
    }

    protected function getEmptyQueryBuilder()
    {
        return $this->getEntityManager()->createQueryBuilder();
    }

    protected function getQueryBuilder()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder('bp');

        $queryBuilder->select('bp')
            ->from('DomainBusinessBundle:BusinessProfile', 'bp')
            ->andWhere('bp.isActive = TRUE')
            ->groupBy('bp.id')
        ;

        return $queryBuilder;
    }

    protected function addLimitOffsetQueryBuilder(QueryBuilder $queryBuilder, $limit, $offset)
    {
        return $queryBuilder
            ->setMaxResults($limit)
            ->setFirstResult($offset)
        ;
    }

    protected function addOrderBySubscriptionPlanQueryBuilder(QueryBuilder &$queryBuilder)
    {
        return $queryBuilder
            ->addSelect('sp.rank as subscription')
            ->leftJoin('bp.subscriptions', 's')
            ->leftJoin('s.subscriptionPlan', 'sp')
            ->andWhere('s.status = :subscriptionStatus')
            ->setParameter('subscriptionStatus', StatusInterface::STATUS_ACTIVE)
            ->addGroupBy('sp.rank')
            ->addOrderBy('subscription', 'DESC')
        ;
    }

    /**
     * Get business profiles which do not have active subscription
     * @return BusinessProfile[]|null
     */
    public function getBusinessWithoutActiveSubscription()
    {
        $activeSubscriptionQb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('b')
            ->from('DomainBusinessBundle:BusinessProfile', 'b')
            ->leftJoin('b.subscriptions', 's')
            ->andWhere('s.status = ' . StatusInterface::STATUS_ACTIVE)
        ;

        $qb = $this->getEntityManager()->createQueryBuilder();

        $objects = $qb
            ->select('bp')
            ->from('DomainBusinessBundle:BusinessProfile', 'bp')
            ->andWhere($qb->expr()->notIn('bp', $activeSubscriptionQb->getDQL()))
            ->getQuery()
            ->getResult()
        ;

        return $objects;
    }

    /**
     * Get business profiles ids array
     *
     * @param int|null $limit
     * @return BusinessProfile[]|null
     */
    public function getIndexedBusinessProfileIds(int $limit = null)
    {
        $query = $this
            ->getEntityManager()
            ->createQueryBuilder()
            ->select('bp.id')
            ->from('DomainBusinessBundle:BusinessProfile', 'bp', 'bp.id')
        ;

        if ($limit) {
            $query->setMaxResults($limit);
        }

        $result = $query
            ->getQuery()
            ->getResult()
        ;

        return array_keys($result);
    }

    /**
     * Adding distance value between points
     *
     * @param QueryBuilder &$queryBuilder
     * @param LocationValueObject $location
     *
     * @return queryBuilder
     */
    protected function addDistanceBetweenPointsQueryBuilder(QueryBuilder $queryBuilder, LocationValueObject $location)
    {
        return $queryBuilder
            ->addSelect($this->getDistanceBetweenPointsSql() . ' AS distance')
            ->setParameter('userLatitude', $location->lat)
            ->setParameter('userLongitude', $location->lng)
        ;
    }

    private function getDistanceBetweenPointsSql()
    {
        return '(' . GeolocationUtils::getEarthDiameterMiles() . ' * sin (
                sqrt (
                    ( 1 - cos (
                        (bp.latitude - :userLatitude) * PI()/180
                        )
                    ) / 2
                    +
                    cos (:userLatitude * PI()/180)
                    *
                    cos (bp.latitude * PI()/180)
                    *
                    ( 1 - cos( ( bp.longitude - :userLongitude ) * PI()/180 ) ) / 2)
                ))';
    }

    public function getHomepageVideos($limit)
    {
        $qb = $this->getVideosQuery()->setMaxResults($limit);

        $results = new Paginator($qb, $fetchJoin = false);

        return $results;
    }

    public function getVideos()
    {
        $qb = $this->getVideosQuery();

        $results = new Paginator($qb, $fetchJoin = false);

        return $results;
    }

    public function getBusinessProfilesWithAllowedAdUnitsForFilter() : array
    {
        $qb = $this->createQueryBuilder('bp');
        $qb
            ->innerJoin('bp.subscriptions', 'bp_s', Join::INNER_JOIN)
            ->innerJoin('bp_s.subscriptionPlan', 'bps_s', Join::INNER_JOIN)
            ->where('bp.isActive = True')
            ->andWhere('bp_s.isActive = True')
            ->andWhere('bps_s.code >= :priorityPlanCode')
            ->setParameter('priorityPlanCode', SubscriptionPlanInterface::CODE_PRIORITY)
        ;

        $result = [];

        /** @var BusinessProfile $businessProfile */
        foreach ($qb->getQuery()->getResult() as $businessProfile) {
            $result[$businessProfile->getId()] = $businessProfile->getName();
        }

        return $result;
    }

    public function getBusinessProfilesForFilter()
    {
        $qb = $this->createQueryBuilder('bp')
            ->where('bp.isActive = True')
        ;

        $result = [];

        /** @var BusinessProfile $businessProfile */
        foreach ($qb->getQuery()->getResult() as $businessProfile) {
            $result[$businessProfile->getId()] = $businessProfile->getName();
        }

        return $result;
    }

    public function getBusinessProfilesWithAllowedAdUnits() : array
    {
        $qb = $this->createQueryBuilder('bp');
        $qb->where('bp.isActive = True');

        return $qb->getQuery()->getResult();
    }

    private function getVideosQuery()
    {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select('v')
            ->from(BusinessProfile::class, 'bp')
            ->innerJoin('bp.subscriptions', 'bp_s')
            ->innerJoin('bp_s.subscriptionPlan', 'bps_p')
            ->innerJoin(VideoMedia::class, 'v', Join::WITH, 'bp.video = v')
            ->where('bp.isActive = TRUE')
            ->andWhere('bps_p.code = :platinumPlanCode')
            ->setParameter('platinumPlanCode', SubscriptionPlanInterface::CODE_PREMIUM_PLATINUM)
            ->orderBy('v.createdAt', 'DESC')
        ;

        return $qb;
    }

    public function getBusinessProfilesByVideosUpdateQb()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder()
            ->select('bp')
            ->from(BusinessProfile::class, 'bp')
            ->innerJoin('bp.subscriptions', 'bp_s')
            ->innerJoin('bp_s.subscriptionPlan', 'bps_p')
            ->innerJoin(VideoMedia::class, 'v', Join::WITH, 'bp.video = v')
            ->where('bp.isActive = TRUE')
            ->andWhere('bps_p.code = :platinumPlanCode')
            ->setParameter('platinumPlanCode', SubscriptionPlanInterface::CODE_PREMIUM_PLATINUM)
        ;

        return $queryBuilder;
    }

    public function getBusinessProfilesByVideosUpdate($searchParams)
    {
        $limit  = $searchParams->limit;
        $offset = ($searchParams->page - 1) * $limit;

        $queryBuilder = $this->getBusinessProfilesByVideosUpdateQb();
        $queryBuilder->orderBy('v.updatedAt', 'DESC');

        $this->addLimitOffsetQueryBuilder($queryBuilder, $limit, $offset);

        return $queryBuilder->getQuery()->getResult();
    }

    public function countBusinessProfilesByVideosUpdate()
    {
        $queryBuilder = $this->getBusinessProfilesByVideosUpdateQb();

        $queryBuilder->select('count(bp.id) as rows');

        $results = $queryBuilder->getQuery()->getResult();

        return count($results);
    }

    /**
     * Main search functionality
     *
     * @param SearchDTO $searchParams
     * @param string    $locale
     * @return array
     */
    public function searchCatalog(SearchDTO $searchParams, $locale)
    {
        if (!$searchParams->locationValue) {
            return null;
        }

        $limit  = $searchParams->limit;
        $offset = ($searchParams->page - 1) * $limit;
        $queryBuilder = $this->getQueryBuilder();

        $this->addDistanceBetweenPointsQueryBuilder($queryBuilder, $searchParams->locationValue);
        $this->addCatalogSearchQueryBuilder($queryBuilder, $searchParams);
        $this->addLimitOffsetQueryBuilder($queryBuilder, $limit, $offset);
        $this->addOrderBySubscriptionPlanQueryBuilder($queryBuilder);

        $results = $queryBuilder->getQuery()->getResult();

        return $results;
    }

    protected function addSearchByCatalogCategoryQueryBuilder(QueryBuilder $queryBuilder, $category)
    {
        return $queryBuilder
            ->join('bp.categories', 'c')
            ->andWhere('c.id = :category')
            ->setParameter('category', $category);
    }

    protected function addSearchByCatalogLocalityQueryBuilder(QueryBuilder $queryBuilder, $locality)
    {
        return $queryBuilder
            ->andWhere('bp.catalogLocality = :locality')
            ->setParameter('locality', $locality);
    }

    /**
     * Counting search results
     *
     * @param SearchDTO $searchParams
     *
     * @return int
     */
    public function countCatalogSearchResults(SearchDTO $searchParams)
    {
        $queryBuilder = $this->getQueryBuilder();

        $this->addCatalogSearchQueryBuilder($queryBuilder, $searchParams);

        $queryBuilder->select('count(bp.id) as rows');

        $results = $queryBuilder->getQuery()->getResult();

        return count($results);
    }

    /**
     * add catalog search query
     *
     * @param QueryBuilder $queryBuilder
     * @param SearchDTO    $searchParams
     */
    protected function addCatalogSearchQueryBuilder($queryBuilder, SearchDTO $searchParams)
    {
        $category1       = $searchParams->getCategory1();
        $category2       = $searchParams->getCategory2();
        $category3       = $searchParams->getCategory3();
        $catalogLocality = $searchParams->getCatalogLocality();

        if ($catalogLocality) {
            $this->addSearchByCatalogLocalityQueryBuilder($queryBuilder, $catalogLocality);

            if ($category1) {
                if ($category2) {
                    if ($category3) {
                        $this->addSearchByCatalogCategoryQueryBuilder($queryBuilder, $category3);
                    } else {
                        $this->addSearchByCatalogCategoryQueryBuilder($queryBuilder, $category2);
                    }
                } else {
                    $this->addSearchByCatalogCategoryQueryBuilder($queryBuilder, $category1);
                }
            }
        }
    }

    public function findBySlug($businessProfileSlug, $customSlug = false)
    {
        $query = $this->getQueryBuilder()
            ->where('bp.slug = :businessProfileSlug')
            ->setParameter('businessProfileSlug', $businessProfileSlug)
        ;

        if ($customSlug) {
            $query->orWhere('bp.slug = :customSlug')
                ->orWhere('bp.slugEn = :customSlug')
                ->orWhere('bp.slugEs = :customSlug')
                ->setParameter('customSlug', $customSlug)
            ;
        }

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * @return IterableResult
     */
    public function getActiveBusinessProfilesIterator()
    {
        $qb = $this->getQueryBuilder();

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    /**
     * @param int $idStart
     * @return IterableResult
     */
    public function getActiveBusinessProfilesIteratorElastic($idStart)
    {
        $qb = $this->getQueryBuilder();
        $qb
            ->andWhere('bp.id >= :idStart')
            ->setParameter('idStart', $idStart)
        ;

        $query = $this->getEntityManager()->createQuery($qb->getDQL());
        $query->setParameter('idStart', $idStart);

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    /**
     * @return IterableResult
     */
    public function getUpdatedBusinessProfilesIterator()
    {
        $qb = $this->getQueryBuilder();
        $qb->andWhere('bp.isUpdated = TRUE');

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    /**
     * Set isUpdated flag for all categories for elastic search synchronization
     *
     * @return mixed
     */
    public function setUpdatedAllBusinessProfiles()
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->update('DomainBusinessBundle:BusinessProfile', 'bp')
            ->where('bp.isActive = true')
            ->set('bp.isUpdated', ':isUpdated')
            ->setParameter('isUpdated', true)
            ->getQuery()
            ->execute()
        ;

        return $result;
    }

    /**
     * workaround for unstable EntityManagerInterface#flush() inside of event lintener
     *
     * @param $id
     *
     * @return mixed
     */
    public function setUpdatedBusinessProfile($id)
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->update('DomainBusinessBundle:BusinessProfile', 'bp')
            ->where('bp.isActive = TRUE')
            ->andWhere('bp.id = :id')
            ->set('bp.isUpdated', ':isUpdated')
            ->setParameter('isUpdated', true)
            ->setParameter('id', $id)
            ->getQuery()
            ->execute()
        ;

        return $result;
    }
}
