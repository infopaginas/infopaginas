<?php

namespace Domain\BusinessBundle\Repository;

use Doctrine\ORM\Internal\Hydration\IterableResult;
use Doctrine\ORM\QueryBuilder;
use Domain\BusinessBundle\Entity\BusinessProfile;
use Domain\BusinessBundle\Entity\Locality;
use Domain\SiteBundle\Utils\Helpers\LocaleHelper;
use Domain\SiteBundle\Utils\Helpers\SiteHelper;
use Oxa\GeolocationBundle\Utils\GeolocationUtils;

/**
 * LocalityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocalityRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @return QueryBuilder
     */
    public function getAvailableLocalitiesQb()
    {
        $qb = $this->createQueryBuilder('l')
            ->orderBy('l.name');

        return $qb;
    }

    /**
     * @return Locality[]
     */
    public function getAvailableLocalities()
    {
        $qb = $this->getAvailableLocalitiesQb()
            ->getQuery()
            ->getResult()
        ;

        return $qb;
    }

    /**
     * @param string $localityName
     * @param string $locale
     *
     * @return Locality|null
     */
    public function getLocalityByNameAndLocale(string $localityName, string $locale)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('l')
            ->from('DomainBusinessBundle:Locality', 'l')
            ->leftJoin('l.translations', 't')
            ->where('lower(l.name) =:name OR (lower(t.content) = :name AND t.locale = :locale)')
            ->setParameter('name', mb_strtolower($localityName))
            ->setParameter('locale', $locale)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        return $query;
    }

    /**
     * @param string $localityName
     *
     * @return Locality|null
     */
    public function getLocalityByName($localityName)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select('l')
            ->from('DomainBusinessBundle:Locality', 'l')
            ->leftJoin('l.translations', 't')
            ->where('lower(l.name) = :name OR (lower(t.content) = :name)')
            ->setParameter('name', mb_strtolower($localityName))
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult()
        ;

        return $query;
    }

    /**
     * @param string $localitySlug
     * @param string|bool $customSlug
     *
     * @return Locality|null
     */
    public function getLocalityBySlug($localitySlug, $customSlug = false)
    {
        $query = $this->getAvailableLocalitiesQb()
            ->where('l.slug = :localitySlug')
            ->setParameter('localitySlug', $localitySlug)
        ;

        if ($customSlug) {
            $query->orWhere('l.slug = :customSlug')
                ->setParameter('customSlug', $customSlug)
            ;
        }

        $query->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * @return IterableResult
     */
    public function getAvailableLocalitiesIterator()
    {
        $qb = $this->getAvailableLocalitiesQb();

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    /**
     * @return IterableResult
     */
    public function getAllLocalitiesIterator()
    {
        $qb = $this->createQueryBuilder('l');

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateLocalities = $query->iterate();

        return $iterateLocalities;
    }

    /**
     * @param string $locale
     *
     * @return Locality[]
     */
    public function getCatalogLocalitiesWithContent($locale = LocaleHelper::DEFAULT_LOCALE)
    {
        $qb = $this->createQueryBuilder('l')
            ->leftJoin('l.catalogItems', 'ci', 'WITH', 'ci.category IS NULL')
            ->andWhere('ci.hasContent = TRUE')
            ->orderBy('l.name')
        ;

        $query = $qb->getQuery();

        if ($locale) {
            SiteHelper::setLocaleQueryHint($query, $locale);
        }

        return $query->getResult();
    }

    /**
     * @param array $ids
     * @return array
     */
    public function getAvailableLocalitiesByIds($ids)
    {
        $qb = $this->getAvailableLocalitiesQb()
            ->andWhere('l.id IN (:ids)')
            ->setParameter('ids', $ids)
        ;

        return $qb->getQuery()->getResult();
    }

    /**
     * @return IterableResult
     */
    public function getUpdatedLocalitiesIterator()
    {
        $qb = $this->getAvailableLocalitiesQb();
        $qb->andWhere('l.isUpdated = TRUE');

        $query = $this->getEntityManager()->createQuery($qb->getDQL());

        $iterateResult = $query->iterate();

        return $iterateResult;
    }

    /**
     * @return mixed
     */
    public function setUpdatedAllLocalities()
    {
        $result = $this->getEntityManager()
            ->createQueryBuilder()
            ->update('DomainBusinessBundle:Locality', 'l')
            ->where('l.isActive = true')
            ->set('l.isUpdated', ':isUpdated')
            ->setParameter('isUpdated', true)
            ->getQuery()
            ->execute()
        ;

        return $result;
    }

    /**
     * @param array  $areas
     * @param string $locale
     *
     * @return Locality[]
     */
    public function getAvailableLocalitiesByAres($areas, $locale)
    {
        $qb = $this->getAvailableLocalitiesQb()
            ->andWhere('l.area IN (:areas)')
            ->setParameter('areas', $areas)
        ;

        $query = $qb->getQuery();

        if ($locale) {
            $query->setHint(
                \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
                'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
            );

            // Force the locale
            $query->setHint(
                \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
                $locale
            );
        }

        return $query->getResult();
    }

    /**
     * @param string $pseudoSlug
     *
     * @return Locality|null
     */
    public function getLocalityByPseudoSlug($pseudoSlug)
    {
        $query = $this->createQueryBuilder('l')
            ->select('l')
            ->leftJoin('l.pseudos', 'lp')
            ->where('lp.slug = :localitySlug')
            ->setParameter('localitySlug', $pseudoSlug)
        ;

        $query->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }
}
