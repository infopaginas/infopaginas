<?php

namespace Domain\BusinessBundle\Repository;

use FOS\UserBundle\Model\UserInterface;

/**
 * BusinessProfileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BusinessProfileRepository extends \Doctrine\ORM\EntityRepository
{
    const SLUG = 'DomainBusinessBundle:BusinessProfile';

    /**
     * @param UserInterface $user
     * @return array
     */
    public function findUserBusinessProfiles(UserInterface $user)
    {
        $businessProfiles = $this->findBy([
            'user' => $user,
        ]);

        return $businessProfiles;
    }
    
    public function search($searchQuery, $location)
    {
        $searchQuery = $this->splitPhraseToPlain($searchQuery);

        $connection = $this->getEntityManager()->getConnection();
        $statement = $connection->prepare($this->getSearchSQLQuery());

        $statement->bindValue("searchQuery", $searchQuery);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }


    public function searchAutosuggest($searchQuery)
    {
        $searchQuery    = $this->splitPhraseToPlain($searchQuery);
        $searchSQL      = $this->getSearchSQLQuery();

        $connection = $this->getEntityManager()->getConnection();
        $statement = $connection->prepare(
            "SELECT
                ts_headline(name, q) as data,
                name
            FROM
            (
                $searchSQL
            ) as search
            "
        );

        $statement->bindValue("searchQuery", $searchQuery);
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }

    protected function splitPhraseToPlain(string $phrase)
    {
        $words = explode(' ', $phrase);
        $wordParts = array_map(
            function ($item) {
                return $item . ":*";
            },
            $words
        );
        $plain = implode(' & ', $wordParts);

        return $plain;
    }

    private function getSearchSQLQuery()
    {
        return 'SELECT
                    bp.id AS id,
                    bp.name,
                    bp.slogan,
                    bp.city,
                    bp.state,
                    bp.zip_code,
                    bp.website,
                    bp.email,
                    q,
                    ts_rank(bp.search_fts, q) AS rank,
                    ROW_NUMBER() over (order by id) as order
                FROM
                    business_profile bp,
                    to_tsquery(:searchQuery) q
                WHERE
                    bp.search_fts @@ q
                AND (
                    bp.deleted_at IS NULL
                )
                ORDER BY rank DESC';
    }
}
